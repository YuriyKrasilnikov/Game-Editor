# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import api_demo_pb2 as proto_dot_api__demo__pb2


class GreeterStub(object):
    """Hello demo sevice 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/api.demo.Greeter/SayHello',
                request_serializer=proto_dot_api__demo__pb2.HelloRequest.SerializeToString,
                response_deserializer=proto_dot_api__demo__pb2.HelloReply.FromString,
                )
        self.SayRepeatHello = channel.unary_stream(
                '/api.demo.Greeter/SayRepeatHello',
                request_serializer=proto_dot_api__demo__pb2.RepeatHelloRequest.SerializeToString,
                response_deserializer=proto_dot_api__demo__pb2.HelloReply.FromString,
                )


class GreeterServicer(object):
    """Hello demo sevice 

    """

    def SayHello(self, request, context):
        """unary call
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SayRepeatHello(self, request, context):
        """server response-streaming RPC call
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=proto_dot_api__demo__pb2.HelloRequest.FromString,
                    response_serializer=proto_dot_api__demo__pb2.HelloReply.SerializeToString,
            ),
            'SayRepeatHello': grpc.unary_stream_rpc_method_handler(
                    servicer.SayRepeatHello,
                    request_deserializer=proto_dot_api__demo__pb2.RepeatHelloRequest.FromString,
                    response_serializer=proto_dot_api__demo__pb2.HelloReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.demo.Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """Hello demo sevice 

    """

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.demo.Greeter/SayHello',
            proto_dot_api__demo__pb2.HelloRequest.SerializeToString,
            proto_dot_api__demo__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SayRepeatHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.demo.Greeter/SayRepeatHello',
            proto_dot_api__demo__pb2.RepeatHelloRequest.SerializeToString,
            proto_dot_api__demo__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CustomerServiceStub(object):
    """CRUD Customer demo sevice 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAll = channel.unary_unary(
                '/api.demo.CustomerService/GetAll',
                request_serializer=proto_dot_api__demo__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_api__demo__pb2.CustomerList.FromString,
                )
        self.Get = channel.unary_unary(
                '/api.demo.CustomerService/Get',
                request_serializer=proto_dot_api__demo__pb2.IdCustomerRequest.SerializeToString,
                response_deserializer=proto_dot_api__demo__pb2.CustomerResponse.FromString,
                )
        self.Insert = channel.unary_unary(
                '/api.demo.CustomerService/Insert',
                request_serializer=proto_dot_api__demo__pb2.UpdateCustomerRequest.SerializeToString,
                response_deserializer=proto_dot_api__demo__pb2.CustomerResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/api.demo.CustomerService/Update',
                request_serializer=proto_dot_api__demo__pb2.UpdateCustomerRequest.SerializeToString,
                response_deserializer=proto_dot_api__demo__pb2.CustomerResponse.FromString,
                )
        self.Remove = channel.unary_unary(
                '/api.demo.CustomerService/Remove',
                request_serializer=proto_dot_api__demo__pb2.IdCustomerRequest.SerializeToString,
                response_deserializer=proto_dot_api__demo__pb2.Empty.FromString,
                )


class CustomerServiceServicer(object):
    """CRUD Customer demo sevice 
    """

    def GetAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Remove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAll': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAll,
                    request_deserializer=proto_dot_api__demo__pb2.Empty.FromString,
                    response_serializer=proto_dot_api__demo__pb2.CustomerList.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=proto_dot_api__demo__pb2.IdCustomerRequest.FromString,
                    response_serializer=proto_dot_api__demo__pb2.CustomerResponse.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=proto_dot_api__demo__pb2.UpdateCustomerRequest.FromString,
                    response_serializer=proto_dot_api__demo__pb2.CustomerResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=proto_dot_api__demo__pb2.UpdateCustomerRequest.FromString,
                    response_serializer=proto_dot_api__demo__pb2.CustomerResponse.SerializeToString,
            ),
            'Remove': grpc.unary_unary_rpc_method_handler(
                    servicer.Remove,
                    request_deserializer=proto_dot_api__demo__pb2.IdCustomerRequest.FromString,
                    response_serializer=proto_dot_api__demo__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.demo.CustomerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CustomerService(object):
    """CRUD Customer demo sevice 
    """

    @staticmethod
    def GetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.demo.CustomerService/GetAll',
            proto_dot_api__demo__pb2.Empty.SerializeToString,
            proto_dot_api__demo__pb2.CustomerList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.demo.CustomerService/Get',
            proto_dot_api__demo__pb2.IdCustomerRequest.SerializeToString,
            proto_dot_api__demo__pb2.CustomerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.demo.CustomerService/Insert',
            proto_dot_api__demo__pb2.UpdateCustomerRequest.SerializeToString,
            proto_dot_api__demo__pb2.CustomerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.demo.CustomerService/Update',
            proto_dot_api__demo__pb2.UpdateCustomerRequest.SerializeToString,
            proto_dot_api__demo__pb2.CustomerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.demo.CustomerService/Remove',
            proto_dot_api__demo__pb2.IdCustomerRequest.SerializeToString,
            proto_dot_api__demo__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
