apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: auth-filter
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.http_connection_manager"
            subFilter:
              name: "envoy.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.config.filter.http.lua.v2.Lua"
          inlineCode: |
            function version()
              return "v0.2"
            end
        
            function log(handle, value)
              handle:logWarn(version() .. ": " .. value)
            end

            function envoy_on_request(request_handle)

              log(request_handle, "start auth...")

              local auth_host = "authorization-profiles-service.authorization.svc.cluster.local"
              local auth_path = "/"
              local auth_cluster = "outbound|80||" .. auth_host

              local redirect_default_location = "https://gamescreator.co"

              local redirect_registration_path = "/registration"
              local redirect_registration_location = redirect_default_location..redirect_registration_path

              --log(request_handle, "auth host: "..auth_host..", auth path: "..auth_path..", auth cluster: "..auth_cluster)

              local cookie = request_handle:headers():get("Cookie")

              ---log(request_handle, "---")
              for header, value in pairs(request_handle:headers()) do
                if header:find("x%-user%-authorization") then
                  request_handle:headers():remove(header)
                end
              end

              local auth_headers, auth_body = request_handle:httpCall(
                auth_cluster,
                {
                  [":method"] = "GET",
                  [":path"] = auth_path,
                  [":authority"] = auth_host,
                  ["Cookie"] = cookie
                },
                nil,
                5000)

              if (auth_headers["x-user-authorization-registered"] == "false") and (auth_headers["x-user-authorization"] == "true") then
                if (request_handle:headers():get(":path") ~= redirect_registration_path) and (request_handle:headers():get("referer") ~= redirect_registration_location) then
                  request_handle:respond(
                    {
                      [":status"] = "303",
                      ["Location"] = redirect_registration_location
                    },
                    "redirect for registration"
                  )
                  do return end
                end
              else
                if request_handle:headers():get(":path") == redirect_registration_path then
                  request_handle:respond(
                    {
                      [":status"] = "303",
                      ["Location"] = redirect_default_location
                    },
                    "redirect to home"
                  )
                  do return end
                end
              end

              log(request_handle, "---")
              for header, value in pairs(auth_headers) do
                if header:find("x%-user%-authorization") then
                  log(request_handle, header..": "..value)
                  request_handle:headers():add(header, value)
                end
              end

            end
  